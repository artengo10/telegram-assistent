
const { Bot } = require("grammy");
const express = require("express");
const { userService, getSystemPrompt } = require("./services/userProfile");
const { askGigaChat } = require("./services/gigaChat");
const { initDatabase } = require("./database/db");
const externalData = require("./services/externalData");
const path = require("path");
const {
  addRow,
  writeToCell,
  writeToRange,
} = require("./services/googleSheets");

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
require("dotenv").config();

const app = express();
const PORT = process.env.PORT || 3000;

// Middleware –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –≤–µ–±—Ö—É–∫–æ–≤!)
app.use(express.json());

// Health check endpoint
app.get("/", (req, res) => {
  res.json({ status: "Bot is running!" });
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new Bot(process.env.BOT_TOKEN);

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
bot.command("start", (ctx) => {
  console.log("‚úÖ –ö–æ–º–∞–Ω–¥–∞ /start –ø–æ–ª—É—á–µ–Ω–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", ctx.from.id);
  ctx.reply(`ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è üé§

–ö–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –≥–æ–ª–æ—Å–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏:
1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
2. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–µ–≥–æ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ "–†–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å"
3. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –±–æ—Ç—É

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/currency - –í—Å–µ –≤–∞–ª—é—Ç—ã
/crypto - –í—Å–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã  
/weather - –ü–æ–≥–æ–¥–∞
/add - –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É (—Ñ–æ—Ä–º–∞—Ç: /add A1 –¢–µ–∫—Å—Ç)
/clear - –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é`);
});

bot.command("currency", async (ctx) => {
  console.log("‚úÖ –ö–æ–º–∞–Ω–¥–∞ /currency –ø–æ–ª—É—á–µ–Ω–∞");
  const data = await externalData.currencyService.getCurrencyDataFormatted();
  await ctx.reply(data || "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –≤–∞–ª—é—Ç–∞—Ö");
});

bot.command("crypto", async (ctx) => {
  console.log("‚úÖ –ö–æ–º–∞–Ω–¥–∞ /crypto –ø–æ–ª—É—á–µ–Ω–∞");
  const data = await externalData.cryptoService.getCryptoDataFormatted();
  await ctx.reply(data || "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã—Ö –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞—Ö");
});

bot.command("weather", async (ctx) => {
  console.log("‚úÖ –ö–æ–º–∞–Ω–¥–∞ /weather –ø–æ–ª—É—á–µ–Ω–∞");
  const weather = await externalData.weatherService.getWeatherDataFormatted();
  await ctx.reply(weather);
});

bot.command("add", async (ctx) => {
  console.log("‚úÖ –ö–æ–º–∞–Ω–¥–∞ /add –ø–æ–ª—É—á–µ–Ω–∞:", ctx.message.text);
  const args = ctx.message.text.split(" ");

  if (args.length < 3) {
    console.log("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã /add");
    await ctx.reply(
      "‚ùå –§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã: /add [—è—á–µ–π–∫–∞] [—Ç–µ–∫—Å—Ç]\n–ù–∞–ø—Ä–∏–º–µ—Ä: /add B1 –ü—Ä–∏–≤–µ—Ç –º–∏—Ä\n–ò–ª–∏: /add A1 –ê—Ä—Ç–µ–º"
    );
    return;
  }

  const cell = args[1].toUpperCase();
  const text = args.slice(2).join(" ");

  console.log(`üìù –ü—ã—Ç–∞—é—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –≤ —è—á–µ–π–∫—É ${cell}: "${text}"`);

  try {
    const success = await writeToCell(cell, text);

    if (success) {
      console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–æ –≤ ${cell}`);
      await ctx.reply(`‚úÖ –¢–µ–∫—Å—Ç "${text}" —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω –≤ —è—á–µ–π–∫—É ${cell}!`);
    } else {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ ${cell}`);
      await ctx.reply(
        "‚ùå –û—à–∏–±–∫–∞! –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –≤ —è—á–µ–π–∫—É. –°–º–æ—Ç—Ä–∏ –ª–æ–≥–∏ –±–æ—Ç–∞."
      );
    }
  } catch (error) {
    console.error("üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ /add:", error);
    await ctx.reply("üí• –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É");
  }
});

bot.command("clear", async (ctx) => {
  console.log("‚úÖ –ö–æ–º–∞–Ω–¥–∞ /clear –ø–æ–ª—É—á–µ–Ω–∞");
  await userService.clearHistory(ctx.from.id);
  await ctx.reply("üóëÔ∏è –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞!");
});

bot.command("debug_voice", async (ctx) => {
  console.log("‚úÖ –ö–æ–º–∞–Ω–¥–∞ /debug_voice –ø–æ–ª—É—á–µ–Ω–∞");
  if (ctx.message.reply_to_message && ctx.message.reply_to_message.voice) {
    const voiceMsg = ctx.message.reply_to_message;
    await ctx.reply(
      `–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:\n${JSON.stringify(voiceMsg, null, 2)}`
    );
  } else {
    await ctx.reply(
      "–û—Ç–≤–µ—Ç—å—Ç–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–æ–π –Ω–∞ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"
    );
  }
});

// –û–ë–©–ò–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –°–û–û–ë–©–ï–ù–ò–ô
bot.on("message", async (ctx) => {
  console.log("üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", ctx.from.id);

  if (ctx.from.id !== parseInt(process.env.YOUR_USER_ID)) {
    console.log(
      "üîí –ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –æ—Ç –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
      ctx.from.id
    );
    return ctx.reply("üîí –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω");
  }

  // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–∞–∫ –∫–æ–º–∞–Ω–¥–∞ - –≤—ã—Ö–æ–¥–∏–º
  if (ctx.message.text && ctx.message.text.startsWith("/")) {
    console.log("‚ö° –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å /, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫");
    return;
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  if (ctx.message.voice) {
    console.log("üé§ –ü–æ–ª—É—á–µ–Ω–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ");
    try {
      await ctx.reply(
        'üé§ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ! \n\n–ß—Ç–æ–±—ã —è –º–æ–≥ –µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞:\n1. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n2. –í—ã–±–µ—Ä–∏—Ç–µ "–†–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å"\n3. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç\n4. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –º–Ω–µ –∫–∞–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'
      );
      return;
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ:", error);
      await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è");
      return;
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  if (ctx.message.forward_from_message_id && ctx.message.text) {
    console.log("üì® –ü–æ–ª—É—á–µ–Ω–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ");
    try {
      const originalMessage = await ctx.api.getMessage(
        ctx.chat.id,
        ctx.message.forward_from_message_id
      );

      if (originalMessage.voice && ctx.message.text) {
        await processTextMessage(ctx, ctx.message.text);
        return;
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:", error);
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  if (ctx.message.text) {
    console.log("üìù –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:", ctx.message.text);
    await processTextMessage(ctx, ctx.message.text);
  }
});

// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async function processTextMessage(ctx, text) {
  const userId = ctx.from.id;
  console.log("üîß –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:", text);

  try {
    const preciseData = await externalData.getPreciseData(text);

    if (preciseData) {
      console.log("üìä –ù–∞–π–¥–µ–Ω—ã —Ç–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞");
      await ctx.reply(preciseData);
      await userService.addToHistory(userId, text, "user");
      await userService.addToHistory(userId, preciseData, "assistant");
      return;
    }

    console.log("ü§ñ –ü–µ—Ä–µ–¥–∞—é –∑–∞–ø—Ä–æ—Å –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ GigaChat");
    await ctx.api.sendChatAction(ctx.chat.id, "typing");
    await userService.addToHistory(userId, text, "user");
    const history = await userService.getChatHistory(userId);
    const messages = [getSystemPrompt(), ...history];

    const aiResponse = await askGigaChat(messages);
    await userService.addToHistory(userId, aiResponse, "assistant");
    await ctx.reply(aiResponse);
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏:", error);
    await ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞");
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –±–æ—Ç–∞
bot.catch((error) => {
  console.error("‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –±–æ—Ç–∞:", error);
});

async function startBot() {
  try {
    console.log("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...");
    await initDatabase();
    await userService.init();
    console.log("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞");

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets
    console.log("üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets...");
    try {
      const testWrite = await writeToCell("A1", "Test connection");
      if (testWrite) {
        console.log("‚úÖ Google Sheets –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ");
      } else {
        console.log("‚ùå Google Sheets: –∑–∞–ø–∏—Å—å –Ω–µ —É–¥–∞–ª–∞—Å—å");
      }
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets:", error.message);
    }

    // üî• –í–´–ë–û–† –†–ï–ñ–ò–ú–ê –†–ê–ë–û–¢–´ –í –ó–ê–í–ò–°–ò–ú–û–°–¢–ò –û–¢ –û–ö–†–£–ñ–ï–ù–ò–Ø
    if (process.env.NODE_ENV === "production") {
      // –†–ï–ñ–ò–ú –î–õ–Ø –°–ï–†–í–ï–†–ê (–í–ï–ë–•–£–ö–ò)
      console.log("üåê –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ä–µ–∂–∏–º Webhook –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞");

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫
      const webhookUrl = `${process.env.RENDER_EXTERNAL_URL}/webhook`;
      await bot.api.setWebhook(webhookUrl);
      console.log(`‚úÖ –í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞: ${webhookUrl}`);

      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–æ–≤
      app.use("/webhook", (req, res) => {
        try {
          bot.handleUpdate(req.body, res);
        } catch (error) {
          console.error("Error handling update:", error);
          res.status(500).send("Error");
        }
      });
    } else {
      // –†–ï–ñ–ò–ú –î–õ–Ø –õ–û–ö–ê–õ–¨–ù–û–ô –†–ê–ó–†–ê–ë–û–¢–ö–ò (–õ–û–ù–ì-–ü–û–õ–õ–ò–ù–ì)
      console.log("ü§ñ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Long Polling –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏");
      await bot.start();
      console.log("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ polling");
    }
  } catch (error) {
    console.error("üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞:", error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä—Å–µ—Ä
const server = app.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}`);
  startBot().catch(console.error);
});

// –ï–¥–∏–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
function setupProcessHandlers() {
  process.on("SIGINT", () => {
    console.log("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...");
    server.close(() => {
      process.exit(0);
    });
  });

  process.on("SIGTERM", () => {
    console.log("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...");
    server.close(() => {
      process.exit(0);
    });
  });
}

setupProcessHandlers();

const { Bot } = require("grammy");
const express = require("express");
const { userService, getSystemPrompt } = require("./services/userProfile");
const { askGigaChat } = require("./services/gigaChat");
const { initDatabase } = require("./database/db");
const externalData = require("./services/externalData");
const path = require("path");
const {
  addRow,
  writeToCell,
  writeToRange,
} = require("./services/googleSheets");

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
require("dotenv").config();

const app = express();
const PORT = process.env.PORT || 3000;

// Health check endpoint
app.get("/", (req, res) => {
  res.json({ status: "Bot is running!" });
});

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
app.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}`);
});

async function startBot() {
  try {
    console.log("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...");
    await initDatabase();
    await userService.init();
    console.log("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞");

    const bot = new Bot(process.env.BOT_TOKEN);

    // –ö–æ–º–∞–Ω–¥—ã
    bot.command("start", (ctx) => {
      ctx.reply(`ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è üé§

–ö–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –≥–æ–ª–æ—Å–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏:
1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
2. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–µ–≥–æ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ "–†–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å"
3. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ç–µ–∫—Å—Ç –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –±–æ—Ç—É

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/currency - –í—Å–µ –≤–∞–ª—é—Ç—ã
/crypto - –í—Å–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã  
/weather - –ü–æ–≥–æ–¥–∞
/add - –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É (—Ñ–æ—Ä–º–∞—Ç: /add A1 –¢–µ–∫—Å—Ç)
/clear - –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é`);
    });

    bot.command("currency", async (ctx) => {
      const data =
        await externalData.currencyService.getCurrencyDataFormatted();
      await ctx.reply(data || "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –≤–∞–ª—é—Ç–∞—Ö");
    });

    bot.command("crypto", async (ctx) => {
      const data = await externalData.cryptoService.getCryptoDataFormatted();
      await ctx.reply(data || "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã—Ö –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞—Ö");
    });

    bot.command("weather", async (ctx) => {
      const weather =
        await externalData.weatherService.getWeatherDataFormatted();
      await ctx.reply(weather);
    });

    // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —è—á–µ–π–∫—É
    bot.command("add", async (ctx) => {
      // –§–æ—Ä–º–∞—Ç: /add B1 –¢–µ–∫—Å—Ç –¥–ª—è —è—á–µ–π–∫–∏
      const args = ctx.message.text.split(" ");

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
      if (args.length < 3) {
        await ctx.reply(
          "‚ùå –§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã: /add [—è—á–µ–π–∫–∞] [—Ç–µ–∫—Å—Ç]\n–ù–∞–ø—Ä–∏–º–µ—Ä: /add B1 –ü—Ä–∏–≤–µ—Ç –º–∏—Ä\n–ò–ª–∏: /add A1 –ê—Ä—Ç–µ–º"
        );
        return;
      }

      const cell = args[1].toUpperCase(); // B1 ‚Üí B1
      const text = args.slice(2).join(" "); // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞ –≤ —Ç–µ–∫—Å—Ç

      // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–ø–∏—Å–∞—Ç—å –≤ —É–∫–∞–∑–∞–Ω–Ω—É—é —è—á–µ–π–∫—É
      const success = await writeToCell(cell, text);

      if (success) {
        await ctx.reply(`‚úÖ –¢–µ–∫—Å—Ç "${text}" —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω –≤ —è—á–µ–π–∫—É ${cell}!`);
      } else {
        await ctx.reply(
          "‚ùå –û—à–∏–±–∫–∞! –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –≤ —è—á–µ–π–∫—É. –°–º–æ—Ç—Ä–∏ –ª–æ–≥–∏ –±–æ—Ç–∞."
        );
      }
    });

    bot.command("clear", async (ctx) => {
      await userService.clearHistory(ctx.from.id);
      await ctx.reply("üóëÔ∏è –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞!");
    });

    bot.command("debug_voice", async (ctx) => {
      if (ctx.message.reply_to_message && ctx.message.reply_to_message.voice) {
        const voiceMsg = ctx.message.reply_to_message;
        await ctx.reply(
          `–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:\n${JSON.stringify(
            voiceMsg,
            null,
            2
          )}`
        );
      } else {
        await ctx.reply(
          "–û—Ç–≤–µ—Ç—å—Ç–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–æ–π –Ω–∞ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"
        );
      }
    });

    // –û–ë–©–ò–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –°–û–û–ë–©–ï–ù–ò–ô
    bot.on("message", async (ctx) => {
      if (ctx.from.id !== parseInt(process.env.YOUR_USER_ID)) {
        return ctx.reply("üîí –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω");
      }

      // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–∞–∫ –∫–æ–º–∞–Ω–¥–∞ - –≤—ã—Ö–æ–¥–∏–º
      if (ctx.message.text && ctx.message.text.startsWith("/")) {
        return;
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
      if (ctx.message.voice) {
        try {
          await ctx.reply(
            'üé§ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ! \n\n–ß—Ç–æ–±—ã —è –º–æ–≥ –µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞:\n1. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n2. –í—ã–±–µ—Ä–∏—Ç–µ "–†–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å"\n3. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç\n4. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –º–Ω–µ –∫–∞–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'
          );
          return;
        } catch (error) {
          console.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ:", error);
          await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è");
          return;
        }
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
      if (ctx.message.forward_from_message_id && ctx.message.text) {
        try {
          const originalMessage = await ctx.api.getMessage(
            ctx.chat.id,
            ctx.message.forward_from_message_id
          );

          if (originalMessage.voice && ctx.message.text) {
            await processTextMessage(ctx, ctx.message.text);
            return;
          }
        } catch (error) {
          console.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:", error);
        }
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
      if (ctx.message.text) {
        await processTextMessage(ctx, ctx.message.text);
      }
    });

    // –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    async function processTextMessage(ctx, text) {
      const userId = ctx.from.id;

      try {
        const preciseData = await externalData.getPreciseData(text);

        if (preciseData) {
          await ctx.reply(preciseData);
          await userService.addToHistory(userId, text, "user");
          await userService.addToHistory(userId, preciseData, "assistant");
          return;
        }

        await ctx.api.sendChatAction(ctx.chat.id, "typing");
        await userService.addToHistory(userId, text, "user");
        const history = await userService.getChatHistory(userId);
        const messages = [getSystemPrompt(), ...history];

        const aiResponse = await askGigaChat(messages);
        await userService.addToHistory(userId, aiResponse, "assistant");
        await ctx.reply(aiResponse);
      } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏:", error);
        await ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞");
      }
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –±–æ—Ç–∞
    bot.catch((error) => {
      console.error("‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –±–æ—Ç–∞:", error);
    });

    console.log("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≥–æ–ª–æ—Å–æ–≤—ã—Ö...");
    await bot.start();
    console.log("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω");
  } catch (error) {
    console.error("üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞:", error);
    process.exit(1);
  }
}

// –ï–¥–∏–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
function setupProcessHandlers() {
  process.on("SIGINT", () => {
    console.log("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...");
    process.exit(0);
  });

  process.on("SIGTERM", () => {
    console.log("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...");
    process.exit(0);
  });
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
setupProcessHandlers();
startBot().catch((error) => {
  console.error("üí• –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:", error);
  process.exit(1);
});

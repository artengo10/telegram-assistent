const { Bot, Keyboard, InlineKeyboard } = require("grammy");
const express = require("express");

// –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
const { pingServer } = require("./ping");
const { initDatabase } = require("./database/db");
const { userService, getSystemPrompt } = require("./services/userProfile");
const { askGigaChat } = require("./services/gigaChat");
const currencyService = require("./services/currencyService");
const cryptoService = require("./services/cryptoService");
const weatherService = require("./services/weatherService");
const externalDataService = require("./services/externalData");
const { writeToCell } = require("./services/googleSheets");

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
require("dotenv").config();

const app = express();
const PORT = process.env.PORT || 3000;

// Middleware –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON
app.use(express.json());

// Health check endpoint
app.get("/", (req, res) => {
  res.json({ status: "Bot is running!" });
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new Bot(process.env.BOT_TOKEN);

// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
function createMainKeyboard() {
  return new Keyboard()
    .text("üí∞ –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç")
    .text("‚Çø –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã")
    .row()
    .text("üå§Ô∏è –ü–æ–≥–æ–¥–∞")
    .text("üìä Google –¢–∞–±–ª–∏—Ü–∞")
    .row()
    .text("üßπ –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é")
    .text("‚ÑπÔ∏è –ü–æ–º–æ—â—å")
    .resized()
    .persistent(); // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –æ—Ç–∫—Ä—ã—Ç–æ–π
}

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.command("start", async (ctx) => {
  console.log("‚úÖ –ö–æ–º–∞–Ω–¥–∞ /start –ø–æ–ª—É—á–µ–Ω–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", ctx.from.id);

  const welcomeText = `ü§ñ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b> –Ø –≤–∞—à AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏.

üéØ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/currency - –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –¶–ë –†–§
/crypto - –¢–æ–ø-10 –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
/weather - –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã
/add - –ó–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É (—Ñ–æ—Ä–º–∞—Ç: /add A1 –¢–µ–∫—Å—Ç)
/clear - –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
/help - –°–ø—Ä–∞–≤–∫–∞

üí° <b>–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ</b> - —ç—Ç–æ –µ—â–µ —É–¥–æ–±–Ω–µ–µ!`;

  await ctx.reply(welcomeText, {
    parse_mode: "HTML",
    reply_markup: createMainKeyboard(),
  });
});

// –ö–æ–º–∞–Ω–¥–∞ /help
bot.command("help", async (ctx) => {
  await ctx.reply(
    `üéØ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>

/currency - –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –¶–ë –†–§
/crypto - –¢–æ–ø-10 –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
/weather - –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã
/add [—è—á–µ–π–∫–∞] [—Ç–µ–∫—Å—Ç] - –ó–∞–ø–∏—Å—å –≤ Google –¢–∞–±–ª–∏—Ü—É
/clear - –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

üí° <b>–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏</b> –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏–∏!`,
    {
      parse_mode: "HTML",
      reply_markup: createMainKeyboard(),
    }
  );
});

// –ö–æ–º–∞–Ω–¥–∞ /currency
bot.command("currency", async (ctx) => {
  console.log("‚úÖ –ö–æ–º–∞–Ω–¥–∞ /currency –ø–æ–ª—É—á–µ–Ω–∞");
  try {
    await ctx.reply("üîÑ –ü–æ–ª—É—á–∞—é –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç...");
    const data = await currencyService.getCurrencyDataFormatted();
    await ctx.reply(data || "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –≤–∞–ª—é—Ç–∞—Ö", {
      reply_markup: createMainKeyboard(),
    });
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /currency:", error);
    await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –≤–∞–ª—é—Ç–∞—Ö", {
      reply_markup: createMainKeyboard(),
    });
  }
});

// –ö–æ–º–∞–Ω–¥–∞ /crypto
bot.command("crypto", async (ctx) => {
  console.log("‚úÖ –ö–æ–º–∞–Ω–¥–∞ /crypto –ø–æ–ª—É—á–µ–Ω–∞");
  try {
    await ctx.reply("üîÑ –ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞—Ö...");
    const data = await cryptoService.getCryptoDataFormatted();
    await ctx.reply(data || "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã—Ö –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞—Ö", {
      reply_markup: createMainKeyboard(),
    });
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /crypto:", error);
    await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞—Ö", {
      reply_markup: createMainKeyboard(),
    });
  }
});

// –ö–æ–º–∞–Ω–¥–∞ /weather
bot.command("weather", async (ctx) => {
  console.log("‚úÖ –ö–æ–º–∞–Ω–¥–∞ /weather –ø–æ–ª—É—á–µ–Ω–∞");
  try {
    await ctx.reply("üîÑ –ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ...");
    const weather = await weatherService.getWeatherDataFormatted();
    await ctx.reply(weather, {
      reply_markup: createMainKeyboard(),
    });
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /weather:", error);
    await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ", {
      reply_markup: createMainKeyboard(),
    });
  }
});

// –ö–æ–º–∞–Ω–¥–∞ /add
bot.command("add", async (ctx) => {
  console.log("‚úÖ –ö–æ–º–∞–Ω–¥–∞ /add –ø–æ–ª—É—á–µ–Ω–∞:", ctx.message.text);
  const args = ctx.message.text.split(" ");

  if (args.length < 3) {
    await ctx.reply(
      "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã</b>\n\n–§–æ—Ä–º–∞—Ç: <code>/add [—è—á–µ–π–∫–∞] [—Ç–µ–∫—Å—Ç]</code>\n\n–ü—Ä–∏–º–µ—Ä—ã:\n<code>/add A1 –ü—Ä–∏–≤–µ—Ç –º–∏—Ä</code>\n<code>/add B2 –î–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞</code>",
      {
        parse_mode: "HTML",
        reply_markup: createMainKeyboard(),
      }
    );
    return;
  }

  const cell = args[1].toUpperCase();
  const text = args.slice(2).join(" ");

  console.log(`üìù –ü—ã—Ç–∞—é—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –≤ —è—á–µ–π–∫—É ${cell}: "${text}"`);

  try {
    await ctx.reply(`üîÑ –ó–∞–ø–∏—Å—ã–≤–∞—é –≤ —è—á–µ–π–∫—É ${cell}...`);
    const success = await writeToCell(cell, text);

    if (success) {
      await ctx.reply(`‚úÖ –¢–µ–∫—Å—Ç "${text}" —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω –≤ —è—á–µ–π–∫—É ${cell}!`, {
        reply_markup: createMainKeyboard(),
      });
    } else {
      await ctx.reply(
        "‚ùå –û—à–∏–±–∫–∞! –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –≤ —è—á–µ–π–∫—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –±–æ—Ç–∞.",
        {
          reply_markup: createMainKeyboard(),
        }
      );
    }
  } catch (error) {
    console.error("üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ /add:", error);
    await ctx.reply("üí• –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É", {
      reply_markup: createMainKeyboard(),
    });
  }
});

// –ö–æ–º–∞–Ω–¥–∞ /clear
bot.command("clear", async (ctx) => {
  console.log("‚úÖ –ö–æ–º–∞–Ω–¥–∞ /clear –ø–æ–ª—É—á–µ–Ω–∞");
  try {
    await userService.clearHistory(ctx.from.id);
    await ctx.reply("üóëÔ∏è –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞!", {
      reply_markup: createMainKeyboard(),
    });
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /clear:", error);
    await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∏—Å—Ç–æ—Ä–∏–∏", {
      reply_markup: createMainKeyboard(),
    });
  }
});

/* // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∫–Ω–æ–ø–æ–∫
bot.on("message:text", async (ctx) => {
  const text = ctx.message.text;

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
  if (ctx.from.id !== parseInt(process.env.YOUR_USER_ID)) {
    console.log(
      "üîí –ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—Ä–∞ –æ—Ç –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
      ctx.from.id
    );
    return ctx.reply("üîí –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω");
  }

  // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å / - —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
  if (text.startsWith("/")) return;

  console.log("üì® –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–Ω–æ–ø–∫–∏:", text);

  switch (text) {
    case "üí∞ –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç":
      await ctx.reply("üîÑ –ü–æ–ª—É—á–∞—é –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç...");
      const currencyData = await currencyService.getCurrencyDataFormatted();
      await ctx.reply(currencyData || "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –≤–∞–ª—é—Ç–∞—Ö", {
        reply_markup: createMainKeyboard(),
      });
      break;

    case "‚Çø –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã":
      await ctx.reply("üîÑ –ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞—Ö...");
      const cryptoData = await cryptoService.getCryptoDataFormatted();
      await ctx.reply(
        cryptoData || "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞—Ö",
        {
          reply_markup: createMainKeyboard(),
        }
      );
      break;

    case "üå§Ô∏è –ü–æ–≥–æ–¥–∞":
      await ctx.reply("üîÑ –ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ...");
      const weatherData = await weatherService.getWeatherDataFormatted();
      await ctx.reply(weatherData, {
        reply_markup: createMainKeyboard(),
      });
      break;

    case "üìä Google –¢–∞–±–ª–∏—Ü–∞":
      await ctx.reply(
        "üìä <b>–†–∞–±–æ—Ç–∞ —Å Google –¢–∞–±–ª–∏—Ü–µ–π</b>\n\n–î–ª—è –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n<code>/add A1 –í–∞—à —Ç–µ–∫—Å—Ç</code>\n\n–ü—Ä–∏–º–µ—Ä—ã:\n<code>/add A1 –ü—Ä–∏–≤–µ—Ç –º–∏—Ä</code>\n<code>/add B2 –î–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞</code>",
        {
          parse_mode: "HTML",
          reply_markup: createMainKeyboard(),
        }
      );
      break;

    case "üßπ –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é":
      await userService.clearHistory(ctx.from.id);
      await ctx.reply("üóëÔ∏è –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞!", {
        reply_markup: createMainKeyboard(),
      });
      break;

    case "‚ÑπÔ∏è –ü–æ–º–æ—â—å":
      await ctx.reply(
        `üéØ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n\n/currency - –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –¶–ë –†–§\n/crypto - –¢–æ–ø-10 –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç\n/weather - –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã\n/add - –ó–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É\n/clear - –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é\n/help - –°–ø—Ä–∞–≤–∫–∞\n\nüí° <b>–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏</b> –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞!`,
        {
          parse_mode: "HTML",
          reply_markup: createMainKeyboard(),
        }
      );
      break;

    default:
      // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –∫–Ω–æ–ø–∫–∞, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      await processTextMessage(ctx, text);
      break;
  }
}); */

// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async function processTextMessage(ctx, text) {
  const userId = ctx.from.id;
  console.log("üîß –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:", text);

  try {
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å "–ø–µ—á–∞—Ç–∞–µ—Ç"
    await ctx.api.sendChatAction(ctx.chat.id, "typing");

    const preciseData = await externalDataService.getPreciseData(text);

    if (preciseData) {
      console.log("üìä –ù–∞–π–¥–µ–Ω—ã —Ç–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞");
      await ctx.reply(preciseData, {
        reply_markup: createMainKeyboard(),
      });
      await userService.addToHistory(userId, text, "user");
      await userService.addToHistory(userId, preciseData, "assistant");
      return;
    }

    console.log("ü§ñ –ü–µ—Ä–µ–¥–∞—é –∑–∞–ø—Ä–æ—Å –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ GigaChat");
    await userService.addToHistory(userId, text, "user");
    const history = await userService.getChatHistory(userId);
    const messages = [getSystemPrompt(), ...history];

    const aiResponse = await askGigaChat(messages);
    await userService.addToHistory(userId, aiResponse, "assistant");
    await ctx.reply(aiResponse, {
      reply_markup: createMainKeyboard(),
    });
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏:", error);
    await ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞", {
      reply_markup: createMainKeyboard(),
    });
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –±–æ—Ç–∞
bot.catch((error) => {
  console.error("‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –±–æ—Ç–∞:", error);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–æ–≤ –¥–ª—è Grammy
app.use("/webhook", async (req, res, next) => {
  try {
    console.log("üì® –ü–æ–ª—É—á–µ–Ω –≤–µ–±—Ö—É–∫ –æ—Ç Telegram");
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–∞–ø—Ä–æ—Å Express –≤ —Ñ–æ—Ä–º–∞—Ç, –ø–æ–Ω—è—Ç–Ω—ã–π –¥–ª—è grammY
    await bot.handleUpdate(req.body, res);
  } catch (error) {
    console.error("Error in webhook handler:", error);
    res.status(500).send("Error");
  }
});

async function initializeBot() {
  try {
    console.log("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞...");

    // –°–Ω–∞—á–∞–ª–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await initDatabase();
    await userService.init();
    console.log("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞");

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∞–º–æ–≥–æ –±–æ—Ç–∞
    await bot.init();
    console.log("‚úÖ –ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –¥–ª—è –º–µ–Ω—é
    await bot.api.setMyCommands([
      { command: "currency", description: "–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –¶–ë –†–§" },
      { command: "crypto", description: "–¢–æ–ø-10 –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç" },
      { command: "weather", description: "–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã" },
      { command: "add", description: "–ó–∞–ø–∏—Å—å –≤ Google –¢–∞–±–ª–∏—Ü—É" },
      { command: "clear", description: "–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞" },
      { command: "help", description: "–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º" },
    ]);

    console.log("‚úÖ –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");

    // –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã
    if (process.env.NODE_ENV === "production") {
      // –†–ï–ñ–ò–ú –î–õ–Ø –°–ï–†–í–ï–†–ê (–í–ï–ë–•–£–ö–ò)
      console.log("üåê –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ä–µ–∂–∏–º Webhook –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞");

      if (!process.env.RENDER_EXTERNAL_URL) {
        throw new Error("RENDER_EXTERNAL_URL environment variable is not set!");
      }

      const webhookUrl = process.env.RENDER_EXTERNAL_URL + "/webhook";
      console.log(`üîÑ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫ –Ω–∞: ${webhookUrl}`);

      await bot.api.setWebhook(webhookUrl);
      console.log("‚úÖ –í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
    } else {
      // –†–ï–ñ–ò–ú –î–õ–Ø –õ–û–ö–ê–õ–¨–ù–û–ô –†–ê–ó–†–ê–ë–û–¢–ö–ò (–õ–û–ù–ì-–ü–û–õ–õ–ò–ù–ì)
      console.log("ü§ñ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Long Polling –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏");
      bot.start();
      console.log("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ polling");
    }

    return true;
  } catch (error) {
    console.error("üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞:", error);
    throw error;
  }
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞
async function startServer() {
  try {
    // –°–Ω–∞—á–∞–ª–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
    await initializeBot();

    // –ó–∞—Ç–µ–º –∑–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    const server = app.listen(PORT, () => {
      console.log(`üöÄ Server is running on port ${PORT}`);
      console.log("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ");
    });

    // –î–æ–±–∞–≤—å—Ç–µ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
    app.get("/health", (req, res) => {
      res.json({ status: "ok", timestamp: new Date().toISOString() });
    });

    // –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø–∏–Ω–≥-—Å–µ—Ä–≤–∏—Å
    pingServer();

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
    process.on("SIGINT", () => {
      console.log("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...");
      server.close(() => {
        process.exit(0);
      });
    });

    process.on("SIGTERM", () => {
      console.log("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...");
      server.close(() => {
        process.exit(0);
      });
    });

    return server;
  } catch (error) {
    console.error("üí• –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä:", error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
if (require.main === module) {
  startServer();
}

module.exports = { app, bot };

const axios = require("axios");

class WeatherService {
  constructor() {
    this.apiKey = process.env.WEATHER_API_KEY; 
  }

  async getWeather(city = "–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥") {
    try {
      const response = await axios.get(
        `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${this.apiKey}&units=metric&lang=ru`,
        { timeout: 5000 }
      );

      const data = response.data;
      return {
        city: data.name,
        temp: Math.round(data.main.temp),
        feels_like: Math.round(data.main.feels_like),
        humidity: data.main.humidity,
        description: data.weather[0].description,
        wind: Math.round(data.wind.speed),
        pressure: Math.round(data.main.pressure * 0.75),
      };
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã:", error.message);
      return null;
    }
  }

  extractCity(query) {
    const cities = [
      "–ù–∏–∂–Ω–µ–º –ù–æ–≤–≥–æ—Ä–æ–¥–µ",
      "—Å–∞–Ω–∫—Ç-–ø–µ—Ç–µ—Ä–±—É—Ä–≥",
      "–Ω–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫",
      "–µ–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥",
      "–∫–∞–∑–∞–Ω—å",
      "—á–µ–ª—è–±–∏–Ω—Å–∫",
      "—Å–∞–º–∞—Ä–∞",
      "–æ–º—Å–∫",
      "—Ä–æ—Å—Ç–æ–≤",
      "—Å–æ—á–∏",
      "–∫—Ä–∞—Å–Ω–æ–¥–∞—Ä",
      "–≤–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫",
    ];
    for (const city of cities) {
      if (query.toLowerCase().includes(city)) {
        return city;
      }
    }
    return null;
  }

  async getWeatherDataFormatted(city) {
    const weather = await this.getWeather(city);
    if (!weather) return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ";

    return `üå°Ô∏è –ü–æ–≥–æ–¥–∞ –≤ ${weather.city}:
‚Ä¢ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: ${weather.temp}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ ${weather.feels_like}¬∞C)
‚Ä¢ ${weather.description}
‚Ä¢ –í–ª–∞–∂–Ω–æ—Å—Ç—å: ${weather.humidity}%
‚Ä¢ –í–µ—Ç–µ—Ä: ${weather.wind} –º/—Å
‚Ä¢ –î–∞–≤–ª–µ–Ω–∏–µ: ${weather.pressure} –º–º —Ä—Ç.—Å—Ç.

–ò—Å—Ç–æ—á–Ω–∏–∫: OpenWeatherMap`;
  }
}

module.exports = new WeatherService();

BOT/ (–≥–ª–∞–≤–Ω–∞—è –ø–∞–ø–∫–∞)
config/
keys.js

module.exports = {
  BOT_TOKEN: "8224749888:AAFpUbuUUGhlhm3Qd6LuvyLskme-aFDjdMg",
  YOUR_USER_ID: 836686565,
  AUTH_KEY:
    "ZjU4ZTA3YmYtOGUzYi00ZjgxLTg3YjMtOGI3Y2RiOWNlOGYyOjIzMDcyNTUzLTYwZTEtNGI5OC04YjVmLTI3YWYyYTliOTBjMA==",
};

database/
bot.db

const { Database } = require("sqlite");
const { open } = require("sqlite");
const path = require("path");
const sqlite3 = require("sqlite3"); // –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É —Å—Ç—Ä–æ–∫—É

let dbInstance = null;

async function initDatabase() {
  if (dbInstance) return dbInstance;

  try {
    const db = await open({
      filename: path.join(__dirname, "bot.db"),
      driver: sqlite3.Database, // –ò—Å–ø—Ä–∞–≤—å—Ç–µ –∑–¥–µ—Å—å
    });

    await db.exec(`
            CREATE TABLE IF NOT EXISTS chat_history (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                role TEXT NOT NULL,
                content TEXT NOT NULL,
                timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        `);

    await db.exec(`
            CREATE TABLE IF NOT EXISTS user_profiles (
                user_id INTEGER PRIMARY KEY,
                name TEXT,
                age INTEGER,
                interests TEXT,
                profession TEXT,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        `);

    console.log("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞");
    dbInstance = db;
    return db;
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î:", error);
    throw error;
  }
}

function getDatabase() {
  if (!dbInstance) {
    throw new Error("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞");
  }
  return dbInstance;
}

module.exports = { initDatabase, getDatabase };


db.js
handlers/
messageHandler.js

const { askGigaChat } = require("../services/gigaChat");
const {
  getChatHistory,
  addToHistory,
  clearHistory,
} = require("../services/userProfile");
const { YOUR_USER_ID } = require("../config/keys");

async function handleMessage(ctx) {
  if (ctx.from.id !== YOUR_USER_ID) {
    return ctx.reply("–ò–∑–≤–∏–Ω–∏—Ç–µ, —ç—Ç–æ—Ç –±–æ—Ç –ø—Ä–∏–≤–∞—Ç–Ω—ã–π");
  }

  const userMessage = ctx.message.text;
  const userId = ctx.from.id;

  console.log("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", userMessage);

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å "–ø–µ—á–∞—Ç–∞–µ—Ç"
  await ctx.api.sendChatAction(ctx.chat.id, "typing");

  // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
  addToHistory(userId, userMessage, "user");

  // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
  const messages = getChatHistory(userId);

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ GigaChat
  const aiResponse = await askGigaChat(messages);

  // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
  addToHistory(userId, aiResponse, "assistant");

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  await ctx.reply(aiResponse);
}

async function handleClearCommand(ctx) {
  if (ctx.from.id !== YOUR_USER_ID) return;

  clearHistory(ctx.from.id);
  await ctx.reply("üóëÔ∏è –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞!");
}

async function handleInfoCommand(ctx) {
  if (ctx.from.id !== YOUR_USER_ID) return;

  const history = getChatHistory(ctx.from.id);
  const messageCount = history.length - 1; // minus system prompt

  await ctx.reply(
    `üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∏–∞–ª–æ–≥–µ:\n` +
      `–°–æ–æ–±—â–µ–Ω–∏–π –≤ –∏—Å—Ç–æ—Ä–∏–∏: ${messageCount}\n` +
      `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /clear —á—Ç–æ–±—ã –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é`
  );
}

module.exports = { handleMessage, handleClearCommand, handleInfoCommand };


node_modules/
services/
cryptoService.js

const axios = require("axios");

class CryptoService {
  constructor() {
    this.cryptoMap = {
      –±–∏—Ç–∫–æ–∏–Ω: "BTC",
      bitcoin: "BTC",
      btc: "BTC",
      —ç—Ñ–∏—Ä: "ETH",
      ethereum: "ETH",
      eth: "ETH",
      usdt: "USDT",
      —Ç–µ—Ç–µ—Ä: "USDT",
      tether: "USDT",
      bnb: "BNB",
      solana: "SOL",
      sol: "SOL",
      cardano: "ADA",
      ada: "ADA",
      ripple: "XRP",
      xrp: "XRP",
      –¥–æ–≥–∏: "DOGE",
      dogecoin: "DOGE",
      doge: "DOGE",
      polkadot: "DOT",
      dot: "DOT",
      litecoin: "LTC",
      ltc: "LTC",
    };
  }

  async getCryptoRates() {
    try {
      const response = await axios.get(
        "https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&order=market_cap_desc&per_page=10&page=1&sparkline=false&price_change_percentage=24h",
        { timeout: 8000 }
      );

      const cryptoData = response.data;
      const rates = {};

      cryptoData.forEach((coin) => {
        rates[coin.symbol.toUpperCase()] = {
          name: coin.name,
          usd: coin.current_price.toLocaleString(),
          change: coin.price_change_percentage_24h.toFixed(2),
          market_cap: this.formatMarketCap(coin.market_cap),
          rank: coin.market_cap_rank,
        };
      });

      return rates;
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –∫—Ä–∏–ø—Ç—ã:", error.message);
      return await this.getCryptoRatesBackup();
    }
  }

  formatMarketCap(marketCap) {
    if (marketCap >= 1e12) return (marketCap / 1e12).toFixed(2) + " —Ç—Ä–ª–Ω";
    if (marketCap >= 1e9) return (marketCap / 1e9).toFixed(2) + " –º–ª—Ä–¥";
    if (marketCap >= 1e6) return (marketCap / 1e6).toFixed(2) + " –º–ª–Ω";
    return marketCap.toLocaleString();
  }

  matchCrypto(query) {
    for (const [key, crypto] of Object.entries(this.cryptoMap)) {
      if (query.includes(key)) {
        return crypto;
      }
    }
    return null;
  }

  async getSpecificCrypto(cryptoCode) {
    const crypto = await this.getCryptoRates();
    if (!crypto || !crypto[cryptoCode]) {
      return null;
    }
    return crypto[cryptoCode];
  }

  async getAllCrypto() {
    return await this.getCryptoRates();
  }

  formatCryptoResponse(crypto, code, isSpecific = false) {
    const change = parseFloat(crypto.change);
    const changeIcon = change > 0 ? "üü¢" : change < 0 ? "üî¥" : "üü°";

    if (isSpecific) {
      return `‚Çø ${crypto.name} (${code})
            
–¶–µ–Ω–∞: $${crypto.usd}
–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ 24—á: ${changeIcon} ${change}%
–†—ã–Ω–æ—á–Ω–∞—è –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è: $${crypto.market_cap}
–†–∞–Ω–≥: #${crypto.rank}

üìä –ò—Å—Ç–æ—á–Ω–∏–∫: CoinGecko
üïê –î–∞–Ω–Ω—ã–µ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏`;
    }

    return `${crypto.rank}. ${crypto.name} (${code})
   üíµ $${crypto.usd} ${changeIcon} ${change}%
   üìä –ö–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è: $${crypto.market_cap}`;
  }

  async getCryptoDataFormatted() {
    const crypto = await this.getAllCrypto();
    if (!crypto) return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç";

    let result = `‚Çø –¢–æ–ø-10 –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç\n\n`;

    Object.entries(crypto).forEach(([symbol, data]) => {
      result += this.formatCryptoResponse(data, symbol) + "\n\n";
    });

    result += `üìä –ò—Å—Ç–æ—á–Ω–∏–∫: CoinGecko API\n`;
    result += `üïê –î–∞–Ω–Ω—ã–µ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏`;

    return result;
  }

  async getCryptoRatesBackup() {
    try {
      const response = await axios.get(
        "https://api.binance.com/api/v3/ticker/24hr",
        { timeout: 5000 }
      );

      const prices = response.data;
      const top10 = prices
        .filter((p) => p.symbol.endsWith("USDT"))
        .sort((a, b) => b.volume - a.volume)
        .slice(0, 10);

      const rates = {};
      top10.forEach((coin, index) => {
        const symbol = coin.symbol.replace("USDT", "");
        rates[symbol] = {
          name: symbol,
          usd: parseFloat(coin.lastPrice).toLocaleString(),
          change: parseFloat(coin.priceChangePercent).toFixed(2),
          market_cap: this.formatMarketCap(
            parseFloat(coin.volume) * parseFloat(coin.lastPrice)
          ),
          rank: index + 1,
        };
      });

      return rates;
    } catch (error) {
      console.error("–†–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥ —Ç–æ–∂–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª:", error.message);
      return null;
    }
  }
}

module.exports = new CryptoService();


currencyService.js

const axios = require("axios");

class CurrencyService {
  constructor() {
    this.currencyMap = {
      –¥–æ–ª–ª–∞—Ä: "USD",
      –¥–æ–ª–ª–∞—Ä–∞: "USD",
      –¥–æ–ª–ª–∞—Ä—ã: "USD",
      usd: "USD",
      –±–∞–∫—Å: "USD",
      –±–∞–∫—Å–∞: "USD",
      –µ–≤—Ä–æ: "EUR",
      eur: "EUR",
      —é–∞–Ω: "CNY",
      yuan: "CNY",
      cny: "CNY",
      –∏–µ–Ω: "JPY",
      yen: "JPY",
      jpy: "JPY",
      —Ñ—É–Ω—Ç: "GBP",
      gbp: "GBP",
      —Ñ—Ä–∞–Ω–∫: "CHF",
      chf: "CHF",
      –ª–∏—Ä–∞: "TRY",
      try: "TRY",
      –∫—Ä–æ–Ω–∞: "SEK",
      sek: "SEK",
      –∑–ª–æ—Ç: "PLN",
      pln: "PLN",
      –≤–æ–Ω–∞: "KRW",
      krw: "KRW",
    };
  }

  async getCurrencyRates() {
    try {
      const response = await axios.get(
        "https://www.cbr-xml-daily.ru/daily_json.js",
        {
          timeout: 5000,
        }
      );
      return response.data;
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç:", error.message);
      return null;
    }
  }

  matchCurrency(query) {
    for (const [key, currency] of Object.entries(this.currencyMap)) {
      if (query.includes(key)) {
        return currency;
      }
    }
    return null;
  }

  async getSpecificCurrency(currencyCode) {
    const data = await this.getCurrencyRates();
    if (!data || !data.Valute[currencyCode]) {
      return null;
    }

    const currency = data.Valute[currencyCode];
    const change = currency.Value - currency.Previous;

    return {
      name: currency.Name,
      value: currency.Value.toFixed(2),
      change: change.toFixed(2),
      nominal: currency.Nominal,
      code: currencyCode,
    };
  }

  async getAllCurrencies() {
    const data = await this.getCurrencyRates();
    if (!data) return null;

    const currencies = {};
    const topCurrencies = [
      "USD",
      "EUR",
      "CNY",
      "GBP",
      "JPY",
      "CHF",
      "TRY",
      "SEK",
      "PLN",
      "KRW",
    ];

    topCurrencies.forEach((code) => {
      if (data.Valute[code]) {
        const currency = data.Valute[code];
        currencies[code] = {
          name: currency.Name,
          value: currency.Value.toFixed(2),
          change: (currency.Value - currency.Previous).toFixed(2),
          nominal: currency.Nominal,
        };
      }
    });

    return currencies;
  }

  formatCurrencyResponse(currency, isSpecific = false) {
    const change = parseFloat(currency.change);
    const changeIcon = change > 0 ? "üìà" : change < 0 ? "üìâ" : "‚û°Ô∏è";
    const changeText =
      change !== 0 ? ` (${change > 0 ? "+" : ""}${change} ‚ÇΩ)` : "";

    if (isSpecific) {
      return `üí± ${currency.name}
            
–ö—É—Ä—Å: ${currency.value} ‚ÇΩ –∑–∞ ${currency.nominal} ${currency.code}
–ò–∑–º–µ–Ω–µ–Ω–∏–µ: ${changeIcon}${changeText}

üìä –ò—Å—Ç–æ—á–Ω–∏–∫: –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –ë–∞–Ω–∫ –†–§
üïê ${new Date().toLocaleTimeString("ru-RU")}`;
    }

    return `${changeIcon} ${currency.name}: ${currency.value} ‚ÇΩ${changeText}`;
  }

  async getCurrencyDataFormatted() {
    const currencies = await this.getAllCurrencies();
    if (!currencies) return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç";

    let result = `üí± –¢–æ–ø-10 –≤–∞–ª—é—Ç (–¶–ë –†–§)\n\n`;

    Object.values(currencies).forEach((currency) => {
      result += this.formatCurrencyResponse(currency) + "\n";
    });

    result += `\nüìä –ò—Å—Ç–æ—á–Ω–∏–∫: –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –ë–∞–Ω–∫ –†–§\n`;
    result += `üïê –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${new Date().toLocaleTimeString("ru-RU")}`;

    return result;
  }
}

module.exports = new CurrencyService();


externalData.js

const currencyService = require("./currencyService");
const cryptoService = require("./cryptoService");
const weatherService = require("./weatherService");

class ExternalDataService {
  async getPreciseData(query) {
    const lowerQuery = query.toLowerCase();

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –≤–∞–ª—é—Ç—É
    const currencyMatch = currencyService.matchCurrency(lowerQuery);
    if (currencyMatch) {
      const currency = await currencyService.getSpecificCurrency(currencyMatch);
      if (currency) {
        return currencyService.formatCurrencyResponse(currency, true);
      }
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É
    const cryptoMatch = cryptoService.matchCrypto(lowerQuery);
    if (cryptoMatch) {
      const crypto = await cryptoService.getSpecificCrypto(cryptoMatch);
      if (crypto) {
        return cryptoService.formatCryptoResponse(crypto, cryptoMatch, true);
      }
    }

    // –û–±—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã
    if (lowerQuery.includes("–ø–æ–≥–æ–¥") || lowerQuery.includes("weather")) {
      const city = weatherService.extractCity(query) || "–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥";
      return await weatherService.getWeatherDataFormatted(city);
    }

    if (
      lowerQuery.includes("–≤–∞–ª—é—Ç") ||
      lowerQuery.includes("–∫—É—Ä—Å") ||
      lowerQuery.includes("currency") ||
      lowerQuery.includes("exchange")
    ) {
      return await currencyService.getCurrencyDataFormatted();
    }

    if (lowerQuery.includes("–∫—Ä–∏–ø—Ç") || lowerQuery.includes("crypto")) {
      return await cryptoService.getCryptoDataFormatted();
    }

    return null;
  }
}

module.exports = new ExternalDataService();


gigaChat.js

const https = require("https");
const { AUTH_KEY } = require("../config/keys");

const customAgent = new https.Agent({ rejectUnauthorized: false });

// –ö—ç—à –¥–ª—è —Ç–æ–∫–µ–Ω–∞ –∏ –µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∂–∏–∑–Ω–∏
let accessTokenCache = {
  token: null,
  expiresAt: 0,
};

async function getGigaChatToken() {
  // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –µ—â–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
  if (accessTokenCache.token && Date.now() < accessTokenCache.expiresAt) {
    console.log("–ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω");
    return accessTokenCache.token;
  }

  try {
    const { default: fetch } = await import("node-fetch");

    const response = await fetch(
      "https://ngw.devices.sberbank.ru:9443/api/v2/oauth",
      {
        method: "POST",
        headers: {
          Authorization: `Basic ${AUTH_KEY}`,
          "Content-Type": "application/x-www-form-urlencoded",
          Accept: "application/json",
          RqUID: generateUUID(),
        },
        body: "scope=GIGACHAT_API_PERS",
        agent: customAgent,
      }
    );

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const data = await response.json();

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –≤ –∫—ç—à (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –æ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 30 –º–∏–Ω—É—Ç)
    accessTokenCache = {
      token: data.access_token,
      expiresAt: Date.now() + 30 * 60 * 1000, // 30 –º–∏–Ω—É—Ç
    };

    console.log("–ù–æ–≤—ã–π —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω");
    return data.access_token;
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:", error.message);
    return null;
  }
}

async function askGigaChat(messages, maxTokens = 512) {
  try {
    const accessToken = await getGigaChatToken();
    if (!accessToken) return "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ AI";

    const { default: fetch } = await import("node-fetch");

    const response = await fetch(
      "https://gigachat.devices.sberbank.ru/api/v1/chat/completions",
      {
        method: "POST",
        headers: {
          Authorization: `Bearer ${accessToken}`,
          "Content-Type": "application/json",
          Accept: "application/json",
        },
        body: JSON.stringify({
          model: "GigaChat",
          messages: messages,
          temperature: 0.7,
          max_tokens: maxTokens,
        }),
        agent: customAgent,
      }
    );

    if (!response.ok) {
      throw new Error(`GigaChat error! status: ${response.status}`);
    }

    const data = await response.json();
    return data.choices[0].message.content;
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ GigaChat:", error.message);
    return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞";
  }
}

function generateUUID() {
  return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function (c) {
    const r = (Math.random() * 16) | 0;
    const v = c === "x" ? r : (r & 0x3) | 0x8;
    return v.toString(16);
  });
}

module.exports = { getGigaChatToken, askGigaChat };


userProfile.js

const { getDatabase } = require("../database/db");

class UserProfileService {
  constructor() {
    this.db = null;
  }

  async init() {
    this.db = getDatabase();
  }

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
  async addToHistory(userId, message, role = "user") {
    await this.db.run(
      "INSERT INTO chat_history (user_id, role, content) VALUES (?, ?, ?)",
      [userId, role, message]
    );
  }

  // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ –∏–∑ –±–∞–∑—ã
  async getChatHistory(userId, limit = 10) {
    const messages = await this.db.all(
      `
            SELECT role, content 
            FROM chat_history 
            WHERE user_id = ? 
            ORDER BY timestamp DESC 
            LIMIT ?
        `,
      [userId, limit]
    );

    return messages.reverse();
  }

  // –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
  async clearHistory(userId) {
    await this.db.run("DELETE FROM chat_history WHERE user_id = ?", [userId]);
  }

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async saveProfile(userId, profile) {
    await this.db.run(
      `
            INSERT OR REPLACE INTO user_profiles (user_id, name, age, interests, profession)
            VALUES (?, ?, ?, ?, ?)
        `,
      [userId, profile.name, profile.age, profile.interests, profile.profession]
    );
  }

  // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async getProfile(userId) {
    return await this.db.get("SELECT * FROM user_profiles WHERE user_id = ?", [
      userId,
    ]);
  }
}

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
const userService = new UserProfileService();

// –ù–æ–≤—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏
function getSystemPrompt(userProfile = null) {
  let profileInfo =
    "–ê—Ä—Ç–µ–º, 17 –ª–µ—Ç, –±–∏–∑–Ω–µ—Å (–ø—Ä–æ–¥–∞–∂–∞ —Ä–µ–∫–ª–∞–º—ã), IT, –ø–ª–∞–Ω—ã –ø–æ –≤–µ–Ω–¥–∏–Ω–≥—É.";

  if (userProfile) {
    profileInfo = `${userProfile.name || "–ê—Ä—Ç–µ–º"}, ${
      userProfile.age || "17"
    } –ª–µ—Ç, `;
    if (userProfile.profession)
      profileInfo += `–±–∏–∑–Ω–µ—Å (${userProfile.profession}), `;
    if (userProfile.interests)
      profileInfo += `–∏–Ω—Ç–µ—Ä–µ—Å—ã: ${userProfile.interests}`;
  }

  return {
    role: "system",
    content: `# –†–æ–ª—å
–¢—ã - –¥–µ–ª–æ–≤–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç ${profileInfo}. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –ø—Ä–æ–≤–æ–¥–∏—Ç—å –≥–ª—É–±–æ–∫–∏–π —Ç—Ä–µ—Ö—ç—Ç–∞–ø–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ª—é–±—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤—ã–∂–∏–º–∫—É.

# –°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è
- –î–µ–ª–æ–≤–æ–π —Ç–æ–Ω
- –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
- –ë–µ–∑ —Å–º–∞–π–ª–∏–∫–æ–≤
- –ë–µ–∑ water —Ç–µ–∫—Å—Ç–∞
- –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
- –û—Ç–≤–µ—á–∞–π –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø—Ä—è–º–æ, –±–µ–∑ –ª–∏—à–Ω–∏—Ö –≤—Å—Ç—É–ø–ª–µ–Ω–∏–π

# –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—é –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
–°–Ω–∞—á–∞–ª–∞ –æ–ø—Ä–µ–¥–µ–ª–∏ —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞:
1. –ó–∞–ø—Ä–æ—Å –æ —á–µ–ª–æ–≤–µ–∫–µ (—á—É–≤—Å—Ç–≤–∞, –æ—Ç–Ω–æ—à–µ–Ω–∏—è, —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏)
2. –ë–∏–∑–Ω–µ—Å-–∑–∞–ø—Ä–æ—Å (–∫–æ–º–ø–∞–Ω–∏–∏, —Ä—ã–Ω–∫–∏, —Ñ–∏–Ω–∞–Ω—Å—ã, —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏)
3. –ó–∞–ø—Ä–æ—Å –æ –ø—Ä–æ–µ–∫—Ç–µ/–¥–µ–ª–µ (–∑–∞–¥–∞—á–∏, —Ü–µ–ª–∏, —Å—Ä–æ–∫–∏, —Ä–µ—Å—É—Ä—Å—ã)
4. –§–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–π/—ç–∫–∑–∏—Å—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å (—Å–º—ã—Å–ª, –∂–∏–∑–Ω—å, –º–æ—Ä–∞–ª—å)
5. –§–∞–∫—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å (–¥–∞–Ω–Ω—ã–µ, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞, –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è)

# –ê–ª–≥–æ—Ä–∏—Ç–º —Ä–∞–±–æ—Ç—ã
–ü–æ—Å–ª–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –∑–∞–ø—Ä–æ—Å–∞, –ø—Ä–æ–≤–µ–¥–∏ —Ç—Ä–µ—Ö—ç—Ç–∞–ø–Ω—ã–π –∞–Ω–∞–ª–∏–∑:

## –î–ª—è –ó–ê–ü–†–û–°–û–í –û –ß–ï–õ–û–í–ï–ö–ï:
- –ü–µ—Å—Å–∏–º–∏—Å—Ç–∏—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑: –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∑–∞—â–∏—Ç—ã, —Å–ª–∞–±—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã
- –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑: –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª —Ä–æ—Å—Ç–∞, —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã
- –û–±—ä–µ–∫—Ç–∏–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑: –ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã, —Ñ–∞–∫—Ç—ã

## –î–ª—è –ë–ò–ó–ù–ï–°-–ó–ê–ü–†–û–°–û–í:
- –ü–µ—Å—Å–∏–º–∏—Å—Ç–∏—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑: —Ä—ã–Ω–æ—á–Ω—ã–µ —Ä–∏—Å–∫–∏, —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —É–≥—Ä–æ–∑—ã
- –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑: —Ä—ã–Ω–æ—á–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏, –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª —Ä–æ—Å—Ç–∞
- –û–±—ä–µ–∫—Ç–∏–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑: —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏, —Ä—ã–Ω–æ—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

## –î–ª—è –ü–†–û–ï–ö–¢–û–í/–î–ï–õ:
- –ü–µ—Å—Å–∏–º–∏—Å—Ç–∏—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑: —Ä–∏—Å–∫–∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏, –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤
- –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑: –≤–æ–∑–º–æ–∂–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è, –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞
- –û–±—ä–µ–∫—Ç–∏–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑: —Å—Ä–æ–∫–∏, –±—é–¥–∂–µ—Ç, –∫–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏

# –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞
–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫—Ä–∞—Ç–∫–∏–º, —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∏ –±–µ–∑ water —Ç–µ–∫—Å—Ç–∞:

**üîé –¢–∏–ø –∑–∞–ø—Ä–æ—Å–∞:** [–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–∏–ø]

**üìå –ö–ª—é—á–µ–≤—ã–µ –∞—Å–ø–µ–∫—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:**
- –ê—Å–ø–µ–∫—Ç 1: ...
- –ê—Å–ø–µ–∫—Ç 2: ...
- –ê—Å–ø–µ–∫—Ç 3: ...

**üìâ –ü–µ—Å—Å–∏–º–∏—Å—Ç–∏—á–Ω—ã–π –≤—ã–≤–æ–¥:**
[–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑, –∫—Ä–∞—Ç–∫–æ]

**üìà –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω—ã–π –≤—ã–≤–æ–¥:**
[–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑, –∫—Ä–∞—Ç–∫–æ]

**‚öñÔ∏è –û–±—ä–µ–∫—Ç–∏–≤–Ω—ã–π –≤—ã–≤–æ–¥:**
[–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑, –∫—Ä–∞—Ç–∫–æ]

**üéØ –ò—Ç–æ–≥–æ–≤–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:**
[–∫–æ–Ω—Å–æ–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–≤–æ–¥, –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É]

–í—Å–µ–≥–¥–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–π –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞ –∞–Ω–∞–ª–∏–∑–µ. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –¥–µ–ª–∞–π –≤—ã–∂–∏–º–∫—É –∏–∑ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –Ω–∞—É—á–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π.`,
  };
}

module.exports = { userService, getSystemPrompt };


weatherService.js

const axios = require("axios");

class WeatherService {
  constructor() {
    this.apiKey = "f25c98092c750fa1c8b225c649b34011";
  }

  async getWeather(city = "–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥") {
    try {
      const response = await axios.get(
        `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${this.apiKey}&units=metric&lang=ru`,
        { timeout: 5000 }
      );

      const data = response.data;
      return {
        city: data.name,
        temp: Math.round(data.main.temp),
        feels_like: Math.round(data.main.feels_like),
        humidity: data.main.humidity,
        description: data.weather[0].description,
        wind: Math.round(data.wind.speed),
        pressure: Math.round(data.main.pressure * 0.75),
      };
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã:", error.message);
      return null;
    }
  }

  extractCity(query) {
    const cities = [
      "–ù–∏–∂–Ω–µ–º –ù–æ–≤–≥–æ—Ä–æ–¥–µ",
      "—Å–∞–Ω–∫—Ç-–ø–µ—Ç–µ—Ä–±—É—Ä–≥",
      "–Ω–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫",
      "–µ–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥",
      "–∫–∞–∑–∞–Ω—å",
      "—á–µ–ª—è–±–∏–Ω—Å–∫",
      "—Å–∞–º–∞—Ä–∞",
      "–æ–º—Å–∫",
      "—Ä–æ—Å—Ç–æ–≤",
      "—Å–æ—á–∏",
      "–∫—Ä–∞—Å–Ω–æ–¥–∞—Ä",
      "–≤–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫",
    ];
    for (const city of cities) {
      if (query.toLowerCase().includes(city)) {
        return city;
      }
    }
    return null;
  }

  async getWeatherDataFormatted(city) {
    const weather = await this.getWeather(city);
    if (!weather) return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ";

    return `üå°Ô∏è –ü–æ–≥–æ–¥–∞ –≤ ${weather.city}:
‚Ä¢ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: ${weather.temp}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ ${weather.feels_like}¬∞C)
‚Ä¢ ${weather.description}
‚Ä¢ –í–ª–∞–∂–Ω–æ—Å—Ç—å: ${weather.humidity}%
‚Ä¢ –í–µ—Ç–µ—Ä: ${weather.wind} –º/—Å
‚Ä¢ –î–∞–≤–ª–µ–Ω–∏–µ: ${weather.pressure} –º–º —Ä—Ç.—Å—Ç.

–ò—Å—Ç–æ—á–Ω–∏–∫: OpenWeatherMap`;
  }
}

module.exports = new WeatherService();


.gitignore

node_modules/
config/
.env
.DS_Store
*.log
database.sqlite

bot.js

const { Bot } = require("grammy");
const { BOT_TOKEN, YOUR_USER_ID } = require("./config/keys");
const { userService, getSystemPrompt } = require("./services/userProfile");
const { askGigaChat } = require("./services/gigaChat");
const { initDatabase } = require("./database/db");
const externalData = require("./services/externalData");
const fs = require("fs");
const path = require("path");

async function startBot() {
  try {
    console.log("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...");
    await initDatabase();
    await userService.init();
    console.log("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞");

    const bot = new Bot(BOT_TOKEN);

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    bot.on("message", async (ctx) => {
      if (ctx.from.id !== YOUR_USER_ID) {
        return ctx.reply("üîí –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω");
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
      if (ctx.message.voice) {
        try {
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
          await ctx.reply(
            'üé§ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ! \n\n–ß—Ç–æ–±—ã —è –º–æ–≥ –µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞:\n1. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n2. –í—ã–±–µ—Ä–∏—Ç–µ "–†–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å"\n3. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç\n4. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –º–Ω–µ –∫–∞–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'
          );
          return;
        } catch (error) {
          console.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ:", error);
          await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è");
          return;
        }
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç)
      if (ctx.message.forward_from_message_id && ctx.message.text) {
        try {
          // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
          const originalMessage = await ctx.api.getMessage(
            ctx.chat.id,
            ctx.message.forward_from_message_id
          );

          // –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
          if (originalMessage.voice && ctx.message.text) {
            await processTextMessage(ctx, ctx.message.text);
            return;
          }
        } catch (error) {
          console.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:", error);
          // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—ã—á–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
        }
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
      if (ctx.message.text) {
        await processTextMessage(ctx, ctx.message.text);
      }
    });

    // –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    async function processTextMessage(ctx, text) {
      const userId = ctx.from.id;

      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã —Å–Ω–∞—á–∞–ª–∞
        if (text.startsWith("/")) {
          return; // –ö–æ–º–∞–Ω–¥—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ
        }

        const preciseData = await externalData.getPreciseData(text);

        if (preciseData) {
          await ctx.reply(preciseData);
          await userService.addToHistory(userId, text, "user");
          await userService.addToHistory(userId, preciseData, "assistant");
          return;
        }

        await ctx.api.sendChatAction(ctx.chat.id, "typing");
        await userService.addToHistory(userId, text, "user");
        const history = await userService.getChatHistory(userId);
        const messages = [getSystemPrompt(), ...history];

        const aiResponse = await askGigaChat(messages);
        await userService.addToHistory(userId, aiResponse, "assistant");
        await ctx.reply(aiResponse);
      } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏:", error);
        await ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞");
      }
    }

    // –ö–æ–º–∞–Ω–¥—ã
    bot.command("start", (ctx) => {
      ctx.reply(`ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è üé§

–ö–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –≥–æ–ª–æ—Å–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏:
1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
2. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–µ–≥–æ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ "–†–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å"
3. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ç–µ–∫—Å—Ç –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –±–æ—Ç—É

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/currency - –í—Å–µ –≤–∞–ª—é—Ç—ã
/crypto - –í—Å–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã  
/weather - –ü–æ–≥–æ–¥–∞
/clear - –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é`);
    });

    bot.command("currency", async (ctx) => {
      const data =
        await externalData.currencyService.getCurrencyDataFormatted();
      await ctx.reply(data || "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –≤–∞–ª—é—Ç–∞—Ö");
    });

    bot.command("crypto", async (ctx) => {
      const data = await externalData.cryptoService.getCryptoDataFormatted();
      await ctx.reply(data || "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã—Ö –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞—Ö");
    });

    bot.command("weather", async (ctx) => {
      const weather =
        await externalData.weatherService.getWeatherDataFormatted();
      await ctx.reply(weather);
    });

    bot.command("clear", async (ctx) => {
      await userService.clearHistory(ctx.from.id);
      await ctx.reply("üóëÔ∏è –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞!");
    });

    bot.command("debug_voice", async (ctx) => {
      // –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∑–∞—Ç–µ–º —ç—Ç—É –∫–æ–º–∞–Ω–¥—É
      if (ctx.message.reply_to_message && ctx.message.reply_to_message.voice) {
        const voiceMsg = ctx.message.reply_to_message;
        await ctx.reply(
          `–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:\n${JSON.stringify(
            voiceMsg,
            null,
            2
          )}`
        );
      } else {
        await ctx.reply(
          "–û—Ç–≤–µ—Ç—å—Ç–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–æ–π –Ω–∞ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"
        );
      }
    });

    bot.catch((error) => {
      console.error("‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –±–æ—Ç–∞:", error);
    });

    console.log("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≥–æ–ª–æ—Å–æ–≤—ã—Ö...");
    await bot.start();
    console.log("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω");
  } catch (error) {
    console.error("üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞:", error);
    process.exit(1);
  }
}

// –ï–¥–∏–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
function setupProcessHandlers() {
  process.on("SIGINT", () => {
    console.log("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...");
    process.exit(0);
  });

  process.on("SIGTERM", () => {
    console.log("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...");
    process.exit(0);
  });
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
setupProcessHandlers();
startBot().catch((error) => {
  console.error("üí• –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:", error);
  process.exit(1);
});


package-lock.json
package.json

{
  "name": "bot",
  "version": "1.0.0",
  "description": "AI Telegram bot with GigaChat integration",
  "main": "bot.js",
  "scripts": {
    "start": "node bot.js",
    "dev": "node bot.js"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "type": "commonjs",
  "dependencies": {
    "@ffmpeg-installer/ffmpeg": "^1.1.0",
    "axios": "^1.12.1",
    "ffmpeg": "^0.0.4",
    "fluent-ffmpeg": "^2.1.3",
    "form-data": "^4.0.4",
    "fs": "^0.0.1-security",
    "grammy": "^1.21.1",
    "node-cron": "^4.2.1",
    "node-fetch": "^3.3.2",
    "node-telegram-bot-api": "^0.66.0",
    "sqlite": "^5.1.1",
    "sqlite3": "^5.1.7",
    "stream": "^0.0.3",
    "dotenv": "^16.3.1"
  },
  "engines": {
    "node": ">=18.0.0"
  }
}

module.exports = {
  BOT_TOKEN: "8224749888:AAFpUbuUUGhlhm3Qd6LuvyLskme-aFDjdMg",
  YOUR_USER_ID: 836686565,
  AUTH_KEY:
    "ZjU4ZTA3YmYtOGUzYi00ZjgxLTg3YjMtOGI3Y2RiOWNlOGYyOjIzMDcyNTUzLTYwZTEtNGI5OC04YjVmLTI3YWYyYTliOTBjMA==",
};